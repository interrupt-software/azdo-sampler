trigger:
  branches:
    include:
    - master
  paths:
    include:
    - pipeline3/iac03

pool:
  vmImage: 'Ubuntu-latest'

stages:

- stage: Validate
  displayName: 'Code Assurance'
  jobs:
  - job: Linter
    displayName: 'Linter Test'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd pipeline3/iac03/staging
          terraform init 
          terraform validate 

  - job: Plan
    dependsOn: Linter
    displayName: 'Run Speculative Plan'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd pipeline3/iac03/staging
          terraform init 
          terraform plan
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

- stage: storageAccount
  displayName: 'Cloud Backend'
  jobs:
  - job: createContainer
    displayName: 'Create Container'
    steps:
    - task: Bash@3
      name: tfstate
      inputs:
        targetType: 'inline'
        script: |
          cd pipeline3/iac03/staging
          terraform init 
          terraform apply -auto-approve
          export RESOURCE_GROUP_NAME=$(terraform output -json | jq -r '.resource_group_name.value')
          export STORAGE_ACCOUNT_NAME=$(terraform output -json | jq -r '.storage_account_name.value')
          echo "##vso[task.setvariable variable=RESOURCE_GROUP_NAME;isOutput=true]$RESOURCE_GROUP_NAME"
          echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME;isOutput=true]$STORAGE_ACCOUNT_NAME"
          mkdir $(Build.ArtifactStagingDirectory)/terraform_state
          mv terraform.tfstate  $(Build.ArtifactStagingDirectory)/terraform_state/.
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/terraform_state
        artifactName: terraform_state
      displayName: 'Publish build artifact with terraform.tfstate'

- stage: Apply
  displayName: 'Build Infrastructure'
  dependsOn: storageAccount
  jobs:
  - job: Deploy
    displayName: 'Deploy Infrastructure'
    variables:
      RESOURCE_GROUP_NAME: $[ stageDependencies.storageAccount.createContainer.outputs['tfstate.RESOURCE_GROUP_NAME'] ]
      STORAGE_ACCOUNT_NAME: $[ stageDependencies.storageAccount.createContainer.outputs['tfstate.STORAGE_ACCOUNT_NAME'] ]
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd pipeline3/iac03/production
          sed -i "s/REPLACE_RESOURCE_GROUP_NAME/$(RESOURCE_GROUP_NAME)/g" main.tf
          sed -i "s/REPLACE_STORAGE_ACCOUNT_NAME/$(STORAGE_ACCOUNT_NAME)/g" main.tf
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

- stage: Destroy
  displayName: 'Destroy Infrastructure'
  dependsOn: storageAccount
  jobs:
  - job: Confirmation
    displayName: 'Approve Destroy'
    pool: server
    timeoutInMinutes: 10
    continueOnError: True
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 10
      continueOnError: True
      inputs:
        notifyUsers: |
          'hashi-bot@hashicorp.com'
        instructions: 'Please validate the stage to destroy your infrastructure. It is done automatically after 10 minutes.'
        onTimeout: 'resume'
    
  - job: DestroyInfrastructure
    displayName: 'Destroy Deployment'
    variables:
      RESOURCE_GROUP_NAME: $[ stageDependencies.storageAccount.createContainer.outputs['tfstate.RESOURCE_GROUP_NAME'] ]
      STORAGE_ACCOUNT_NAME: $[ stageDependencies.storageAccount.createContainer.outputs['tfstate.STORAGE_ACCOUNT_NAME'] ]
    dependsOn: Confirmation
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          env | grep -i group_name
          env | grep -i account_name
          cd pipeline3/iac03/production
          sed -i "s/REPLACE_RESOURCE_GROUP_NAME/$(RESOURCE_GROUP_NAME)/g" main.tf
          sed -i "s/REPLACE_STORAGE_ACCOUNT_NAME/$(STORAGE_ACCOUNT_NAME)/g" main.tf
          terraform init
          terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

- stage: Cleanup
  displayName: 'Cleanup Backend'
  dependsOn: 
  - storageAccount
  - Destroy
  jobs:
  - job: DestroyStorageAccount
    displayName: 'Destroy Blob'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
  
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd pipeline3/iac03/staging
          terraform init
          mv $(Build.ArtifactStagingDirectory)/terraform_state/terraform.tfstate .
          terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        